(define concurrency 1)

(define master
  (actor
    (("sum-upto" last)
      (define per-proc (/ last concurrency))
      (do ((i 0))
        ((= i concurrency))
        (let ((child (generate-child)) (start (+ (* i per-proc) 1)) (end (* (+ i 1) per-proc)))
          (child start)
          (dump child)
          (child ! "sum-range" start end self)
        )
        (set! i (+ i 1))
      )
    )
    (("add-result" num)
      (print num)
    )
  )
)

(define (generate-child)
  (actor
    (("sum-range" range-start range-end parent)
      (print "sum-range")
      (do ((sum 0) (i range-start))
        ((> i range-end)
          (parent ! "add-result" sum)
        )
        (set! sum (+ sum i))
        (set! i (+ i 1))
      )
    )
  )
)

(master start)
(master ! "sum-upto" 4)

(do () (#f))
