// Pair is a type which is generated by cons procedure.
// Pair has two pointers, which are named car and cdr.
//
// List is expressed by linked list of Pair.
// And procedure application has list which consists of Pair
// as its arguments.

package scheme

type Pair struct {
	ObjectBase
	Car         Object
	Cdr         *Pair
	environment *Environment
}

func (p *Pair) String() string {
	if p.IsEmpty() {
		return "()"
	} else {
		return "Not implemented."
	}
}

func (p *Pair) EvaledCar() Object {
	switch p.Car.(type) {
	case *Application:
		return p.Car.(*Application).applyProcedure()
	default:
		return p.Car
	}
}

func (p *Pair) IsList() bool {
	return true
}

func (p *Pair) IsEmpty() bool {
	return p.Car == nil && p.Cdr == nil
}

func (p *Pair) ListLength() int {
	if p.IsEmpty() {
		return 0
	} else {
		return p.Cdr.ListLength() + 1
	}
}
